<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="13" name="NBOFNOTES"/>
<constant value="30" name="TIMER0"/>
<constant value="13" name="NOTETIME"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">var counter = 0
var colorchange = 0 #1== go up in intensity
var working = 0

# variables for notes
var notes[NBOFNOTES]
var durations[NBOFNOTES]
var note_index = 13
var wave[142]
var i
var angle
var cos_result

sub initilize
colorchange = 1
counter = 0
timer.period[0] = TIMER0

# compute a sinus wave for sound
for i in 0:141 do
	angle = (i-70)*468
	call math.cos(cos_result, angle)
	wave[i] = cos_result/256
end
call sound.wave(wave)
call sound.system(-1)
call leds.top(0,0,0)
call leds.bottom.left(0,0,0)
call leds.bottom.right(0,0,0)
call leds.circle(0,0,0,0,0,0,0,0)

onevent sound.finished
	if note_index != NBOFNOTES then
		call sound.freq(notes[note_index], durations[note_index])
		note_index += 1
	end

onevent buttons
	if button.center == 1 then
		callsub initilize
		if working == 0 then
			working = 1
		end
	end
	
		call math.copy(notes, [330, 330, 330, 660, 932, 988, 932, 740, 932, 880, 698, 880, 831])
		call math.copy(durations, [NOTETIME, NOTETIME, NOTETIME, NOTETIME, NOTETIME, NOTETIME, NOTETIME*2, NOTETIME, NOTETIME, NOTETIME*2, NOTETIME, NOTETIME, NOTETIME*2])
		call sound.freq(notes[0], durations[0])
		note_index = 1
	#end 
	
	
onevent timer0
	if working == 1 then
		if counter &lt; 32 then
			counter++
			call leds.top(counter,0,0)
		end
	elseif working == -1 then
		if counter > 0 then
			counter--
			call leds.top(counter,0,0)
		end
	end
	</node>


</network>
