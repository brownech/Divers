<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="0" name="OFF"/>
<constant value="1" name="CHOSESIZE"/>
<constant value="2" name="WAIT"/>
<constant value="3" name="ALIGNREAR"/>
<constant value="4" name="GOFORWARD"/>
<constant value="5" name="ROTATE"/>
<constant value="6" name="ALIGNFRONT"/>
<constant value="0" name="FALSE"/>
<constant value="1" name="TRUE"/>
<constant value="100" name="FORWARDSPEED"/>
<constant value="60" name="ROTATESPEED"/>
<constant value="10" name="ALIGNSPEED"/>
<constant value="200" name="WAITTIME"/>
<constant value="675" name="MAXFORWARDTIME"/>
<constant value="761" name="ROTATETIME"/>
<constant value="25" name="DELTA"/>
<constant value="5" name="FASTTIMER"/>
<constant value="4" name="LEDHIGH"/>
<constant value="1" name="LEDLOW"/>
<constant value="40" name="PROXTOLERANCE"/>
<constant value="2500" name="PROXREAR"/>
<constant value="4000" name="PROXFRONT"/>
<constant value="3600" name="PROXFRONTSIDE"/>
<constant value="50" name="SLOWTIMER"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">#Filename: DrawSquare.aesl
#Goal: Draw a square of sizes ranging from 10cm to 50cm, defined by the user
#Name: Christopher Browne
#Place: ETML, Lausanne

var state = OFF
var nextstate = OFF
var waitcounter = 0

var sidecounter = 0 #varies from 1 to 4 (side of the square being drwan)
var spiralcounter = 0 #number of times robot has gone round
var forwardcounter = 0
var rotatecounter = 0
var forwardtime = 0

var size = 0 #o:off  1-5:size
var previoussize = 0

var ledarray[8] #stores values for leds.circle
var i = 0 #for going through array
var j = 0

var rearleftisaligned = FALSE
var rearrightisaligned = FALSE
var frontleftisaligned = FALSE
var frontrightisaligned = FALSE

var ledbutton = 0 #shows time passed on current line
var ledcircle = 0 #shows time passed on current spiral
var totalspiralnumber = 0

sub initialize
	call sound.system(-1)
	call leds.buttons(0,0,0,0)
	call leds.top(0,0,0)
	call leds.temperature(0,0)
	call leds.prox.h(0,0,0,0,0,0,0,0)
	call leds.prox.v(0,0)
	call leds.rc(0)
	call leds.sound(0)
	call leds.circle(0,0,0,0,0,0,0,0)
	call leds.bottom.left(0,0,0)
	call leds.bottom.right(0,0,0)
	call leds.prox.h(0,0,0,0,0,0,0,0)
	state = CHOSESIZE
	nextstate = OFF
	timer.period[0] = FASTTIMER
	timer.period[1] = SLOWTIMER
	waitcounter = 0
	forwardtime = MAXFORWARDTIME 
	size = 1
	previoussize = 0
	sidecounter = 0
	spiralcounter = -1
	forwardcounter = 0
	rotatecounter = 0
	rearleftisaligned = FALSE
	rearrightisaligned = FALSE
	frontleftisaligned = FALSE
	frontrightisaligned = FALSE
	ledbutton = 0
	ledcircle = 0
	totalspiralnumber = 0
	for i in 0:7 do
		ledarray[i] = 0
	end
	
#turn circle LEDs on and off according to size
sub switchcircleleds
	#go through array
	for i in 0:7 do
		if i &lt; size then
			ledarray[i] = LEDHIGH
		else
			ledarray[i] = 0
		end
	end
	call leds.circle(ledarray[0], ledarray[1], ledarray[2], ledarray[3], ledarray[4], ledarray[5], ledarray[6], ledarray[7])
	
sub goforward
	#call leds.circle(LEDLOW, LEDLOW,0,0,0,0,0,LEDLOW)
	motor.left.target = FORWARDSPEED
	motor.right.target = FORWARDSPEED
	
sub stop
	#call leds.circle(0,LEDLOW,0,LEDLOW,0,LEDLOW,0,LEDLOW)
	motor.left.target = 0
	motor.right.target = 0
	
#rotate 90Â° to the right
sub rotate
	#call leds.circle(0,LEDLOW,LEDLOW,LEDLOW,0,0,0,0)
	motor.left.target = ROTATESPEED
	motor.right.target = -ROTATESPEED
	
sub kill
	callsub stop
	#call leds.circle(0,0,0,0,0,0,0,0)
	state = 0
	timer.period[0] = 0
	
#align rear, so robot is perpendicular to wall
sub alignrear
	#when rear-left is too close
	when prox.horizontal[5] > (PROXREAR + PROXTOLERANCE) do
		motor.left.target = ALIGNSPEED
	end
	#when rear-left is too far
	when prox.horizontal[5] &lt; (PROXREAR - PROXTOLERANCE) do
		motor.left.target = -ALIGNSPEED
	end
	#when rear-right is too close
	when prox.horizontal[6] > (PROXREAR + PROXTOLERANCE) do
		motor.right.target = ALIGNSPEED
	end
	#when rear-right is too far
	when prox.horizontal[6] &lt; (PROXREAR - PROXTOLERANCE) do
		motor.right.target = -ALIGNSPEED
	end
	#stop left motor when distance is correct
	if prox.horizontal[5] &lt; (PROXREAR + PROXTOLERANCE) and prox.horizontal[5] > (PROXREAR - PROXTOLERANCE) then
		motor.left.target = 0
		rearleftisaligned = TRUE
	end
	#stop right motor when distance is correct
	if prox.horizontal[6] &lt; (PROXREAR + PROXTOLERANCE) and prox.horizontal[6] > (PROXREAR - PROXTOLERANCE) then
		motor.right.target = 0
		rearrightisaligned = TRUE
	end
	
sub alignfront
	when prox.horizontal[1] > (PROXFRONTSIDE) do
		motor.left.target = -ALIGNSPEED
	end
	
	when prox.horizontal[1] &lt; (PROXFRONTSIDE - 2 * PROXTOLERANCE) do
		motor.left.target = ALIGNSPEED
	end
	
	when prox.horizontal[3] > (PROXFRONTSIDE + PROXTOLERANCE) do
		motor.right.target = -ALIGNSPEED
	end
	
	when prox.horizontal[3] &lt; (PROXFRONTSIDE - PROXTOLERANCE) do
		motor.right.target = ALIGNSPEED
	end
	
	if prox.horizontal[1] &lt; (PROXFRONTSIDE) and prox.horizontal[1] > (PROXFRONTSIDE - 2 * PROXTOLERANCE) then
		motor.left.target = 0
		frontleftisaligned = TRUE
	end
	
	if prox.horizontal[3] &lt; (PROXFRONTSIDE + PROXTOLERANCE) and prox.horizontal[3] > (PROXFRONTSIDE - PROXTOLERANCE) then
		motor.right.target = 0
		frontrightisaligned = TRUE
	end
	
sub resetalignbools
	rearleftisaligned = FALSE
	rearrightisaligned = FALSE
	frontleftisaligned = FALSE
	frontrightisaligned = FALSE
	
sub getforwardtime
	if sidecounter == 1 then
		forwardtime = (size * MAXFORWARDTIME) - (spiralcounter * DELTA)
	elseif sidecounter == 2 then
		forwardtime = (size * MAXFORWARDTIME) - (2 * spiralcounter * DELTA)
	elseif sidecounter == 4 then
		forwardtime = (size * MAXFORWARDTIME) - ((2 * spiralcounter + 1) * DELTA)
	end
	
sub lightcircleleds
	if ledcircle &lt;= 32 then
		call leds.circle(ledcircle,0,0,0,0,0,0,0)
	else
		j = 0
		while ledcircle > 32 do
			ledcircle = ledcircle - 32
			j++
		end
		i = 0
		while i &lt; j do
			ledarray[i] = 32
			i++
		end
		ledarray[i] = ledcircle
		call leds.circle(ledarray[0],ledarray[1],ledarray[2],ledarray[3],ledarray[4],ledarray[5],ledarray[6],ledarray[7])
	end
############################################################
	
onevent buttons
	#when -> button does not get pushed many times
	when button.center == 1 do
		call leds.buttons(LEDHIGH, LEDHIGH, LEDHIGH, LEDHIGH)
		if state == OFF then
			callsub initialize
		elseif state == CHOSESIZE then
			state = ALIGNREAR
			call leds.circle(0,0,0,0,0,0,0,0)
			call leds.buttons(0,0,0,0)
			totalspiralnumber = size * MAXFORWARDTIME / (2 * DELTA)
		elseif state == WAIT then
			nextstate = GOFORWARD
		end
	end
	
	when button.forward == 1 do
		call leds.buttons(LEDHIGH, LEDLOW, LEDLOW, LEDLOW)
	end
	
	when button.right == 1 do
		call leds.buttons(LEDLOW, LEDHIGH, LEDLOW, LEDLOW)
		#change size
		if state == CHOSESIZE and size &lt; 5 then
			size++
		end
	end
	
	when button.backward == 1 do
		call leds.buttons(LEDLOW, LEDLOW, LEDHIGH, LEDLOW)
		callsub kill
	end
	
	when button.left == 1 do
		call leds.buttons(LEDLOW, LEDLOW, LEDLOW, LEDHIGH)
		#change size
		if state == CHOSESIZE and size > 1 then
			size--
		end
	end
	
	#reset LEDs when button is released
	if state != ALIGNREAR then
		when button.center == 0 and button.forward == 0 and button.right == 0 and button.backward == 0 and button.left == 0 do
			call leds.buttons(LEDLOW, LEDLOW, LEDLOW, LEDLOW)
		end
	end
	
	
############################################################
	
#fast timer (~5 ms)
onevent timer0

	when state == WAIT do
		waitcounter = 0
		callsub stop
	end
	
	when state == GOFORWARD do
		forwardcounter = 0
		callsub goforward
		if sidecounter == 4 then
			sidecounter = 1
		else
			sidecounter++
		end
		callsub getforwardtime
	end
	
	when state == ROTATE do
		rotatecounter = 0
		callsub rotate
	end
	
	when state == ALIGNREAR or state == ALIGNFRONT do
		callsub resetalignbools
		if ((2 * spiralcounter + 1) * DELTA) >= size * MAXFORWARDTIME then
			callsub stop
			state = OFF
		end
	end
	
	#useful if prox is already smaller than PROXREAR + PROXTOLERANCE when robot makes turn 2
	when sidecounter == 3 do
		if prox.horizontal[2] > (PROXFRONT - PROXTOLERANCE) then
			state = WAIT
			nextstate = ALIGNFRONT
		end
	end

############################################################

	if state == CHOSESIZE then
		#is size has changed
		if size != previoussize then
			previoussize = size
			callsub switchcircleleds
		end
	end
	
	if state == ALIGNREAR then
		#if robot has a wall behind it
		if prox.horizontal[5] != 0 and prox.horizontal[6] != 0 then
			callsub alignrear
			if rearleftisaligned == TRUE and rearrightisaligned == TRUE then
				state = WAIT
				nextstate = GOFORWARD #WAIT
			end
		end
	end
	
	if state == ALIGNFRONT then
		callsub alignfront
		if frontleftisaligned == TRUE and frontrightisaligned == TRUE then
			state = WAIT
			nextstate = ROTATE
		end
	end
	
	if state == WAIT then
		waitcounter++
		when waitcounter >= WAITTIME do
			#must initialize counter, so following code is checked many times,
			#so robot can go forward after user pushes button after self-align (and puts pen in)
			waitcounter = 0
			state = nextstate
		end
	end
	
	#rotate if not third side of the square
	if state == GOFORWARD and sidecounter != 3 then
		forwardcounter++
		when forwardcounter >= forwardtime do
			state = WAIT
			nextstate = ROTATE
		end
	end
	
	#if robot must align front with wall, instead of rotating
	if sidecounter == 3 then
		forwardcounter++
		#when robot is close enough to wall to start aligning
		when prox.horizontal[2] > (PROXFRONT - PROXTOLERANCE) do
			state = WAIT
			nextstate = ALIGNFRONT
		end
	end
	
	if state == ROTATE then
		rotatecounter++
		when rotatecounter >= ROTATETIME do
			state = WAIT
			#if not in final part of square, go forward, if not align
			if sidecounter != 4 then
				nextstate = GOFORWARD
			else
				nextstate = ALIGNREAR
			end	
		end
	end

#slow timer (~50ms)
onevent timer1
	if state == GOFORWARD then
		ledbutton = 32 * forwardcounter / forwardtime
		if ledbutton > 32 then
			ledbutton = 32
		end
		if sidecounter == 1 then
			call leds.buttons(ledbutton,0,0,0)
		elseif sidecounter == 2 then
			call leds.buttons(32,ledbutton,0,0)
		elseif sidecounter == 3 then
			call leds.buttons(32,32,ledbutton,0)
		elseif sidecounter == 4 then
			call leds.buttons(32,32,32,ledbutton)
		end	
	end	
	
	when state == ALIGNREAR do
		spiralcounter++
		ledcircle = spiralcounter * 256 / totalspiralnumber
		callsub lightcircleleds	
	end</node>


</network>
